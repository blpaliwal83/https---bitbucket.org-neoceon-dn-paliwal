/*
 * File: app/view/CategoryOnSearch.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DNB.view.CategoryOnSearch', {
    extend: 'Ext.Container',
    alias: 'widget.categoryonsearch',

    requires: [
        'Ext.dataview.DataView',
        'Ext.XTemplate'
    ],

    config: {
        height: '100%',
        id: 'CategoryOnSearch',
        top: 50,
        width: '80%',
        hideOnMaskTap: true,
        modal: true,
        items: [
            {
                xtype: 'dataview',
                height: '60%',
                itemId: 'CategorySearchList',
                style: 'background-color:#36AEE4;color:white;',
                itemTpl: Ext.create('Ext.XTemplate', 
                    '<table width="100%" height="40px" ><tr>',
                    '    <td style="width:17%;padding-left:15px;padding-top:5px;">',
                    '    <tpl if="isSelected ==\'yes\'">',
                    '        <img width="20px" height="20px" src="resources/images/tick_mark.png" />',
                    '    </tpl>',
                    '    </td><td style="text-align:left;">',
                    '    {title}',
                    '    </td></tr></table>',
                    {
                        GetImage: function(isSelected) {
                            if(isSelected=='yes'){
                                return 'resources/images/tick_mark.png';
                            }
                            else{
                                return '';// 'resources/images/categoryNotSelected.PNG';
                            }
                        }
                    }
                ),
                store: 'EventCategorySearchStore'
            }
        ],
        listeners: [
            {
                fn: 'onCategoryListItemTap',
                event: 'itemtap',
                delegate: '#CategorySearchList'
            }
        ]
    },

    onCategoryListItemTap: function(dataview, index, target, record, e, eOpts) {
        var catSearchSelectedList=[];
        categorySelectedOnSearchPage=[];
        if(categorySearchListData.length>0){
            for(var i=0;i<categorySearchListData.length;i++){
                if(categorySearchListData[i].id==record.data.id){
                    if(categorySearchListData[i].isSelected=='yes')
                        categorySearchListData[i].isSelected='no';
                    else
                        categorySearchListData[i].isSelected='yes';
                }
                if(categorySearchListData[i].isSelected=='yes'){
                    catSearchSelectedList.push(categorySearchListData[i].id);
                    categorySelectedOnSearchPage.push(categorySearchListData[i].id);
                }
            }
            Ext.getStore('EventCategorySearchStore').setData(categorySearchListData);
        }
        var value=Ext.getCmp('eventsearchfield').getValue();

        var store = Ext.getStore('NoticesSearchStore');
        store.clearFilter();
        /*store.filterBy(function(record, id){
            var tempCatIds=record.get('categoryIds');
            for(j=0;j<catSearchSelectedList.length;j++){
                if(tempCatIds.indexOf(':'+catSearchSelectedList[j]+':')>=0){
                    return true;
                    break;
                }
            }
        });*/
        console.log(value);
        if (value) {
            console.log('here-1');
            if(categorySelectedOnSearchPage.length>0){
                store.filterBy(function(record, id){
                    var title = record.get('title');
                    var venu_detail = record.get('venu_detail');

                    var pattern = new RegExp(value, 'gi');

                    if((pattern.test(title) || pattern.test(venu_detail))){
                        var tempCatIds=record.get('categoryIds');
                        for(j=0;j<categorySelectedOnSearchPage.length;j++){
                            if(tempCatIds.indexOf(':'+categorySelectedOnSearchPage[j]+':')>=0){
                                return true;
                            }
                        }
                    }
                });
            }else{
                console.log('here-2');
                store.filterBy(function(record, id){
                    var title = record.get('title');
                    var venu_detail = record.get('venu_detail');

                    var pattern = new RegExp(value, 'gi');

                    if((pattern.test(title) || pattern.test(venu_detail))){
                        return true;
                    }
                });
            }
        }
        else{
            console.log('here-3');
            console.log(catSearchSelectedList);
            if(catSearchSelectedList.length>0){
                store.filterBy(function(record, id){
                    var tempCatIds=record.get('categoryIds');
                    for(j=0;j<catSearchSelectedList.length;j++){
                        if(tempCatIds.indexOf(':'+catSearchSelectedList[j]+':')>=0){
                            return true;
                            break;
                        }
                    }
                });
            }
        }

    }

});